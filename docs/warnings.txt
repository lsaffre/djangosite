T:\hgwork\site\docs\autodoc\index.rst:10: WARNING: toctree contains reference to nonexisting document u'autodoc/django_site.utils'
T:\hgwork\site\docs\index.rst:32: WARNING: toctree contains reference to nonexisting document u'about/index'
T:\hgwork\site\docs\releases\index.rst:13: WARNING: toctree contains reference to nonexisting document u'releases/coming'
T:\hgwork\site\docs\releases\index.rst:23: WARNING: toctree glob pattern u'1.0.?' didn't match any documents

`django_site` is a Django app which does not define 
any models, but provides a :class:`Site` class designed to 
be instantiated as ``settings.SITE``.
Basic usage in your :xfile:`settings.py` file::

      from django_site import Site
      SITE = Site(__file__,globals())
      INSTALLED_APPS = [... "django_site"]

The base class provides a :meth:`startup <Site.startup>` 
method which runs after Django has populated the model cache.
It analyzes the installed apps and
emits two startup signals 
:attr:`pre_analyze <django_site.signals.pre_analyze>`
and :attr:`post_analyze <django_site.signals.post_analyze>`.

If you have `django_site` installed, 
then you can write in any models module code like this::

    from django_site.signals import post_analyze, receiver
    
    @receiver(post_analyze)
    def my_handler(sender,**kw):
        # code to run exactly once per process at startup
        


    >>> from django.conf import settings
    >>> print settings.SITE.welcome_text()

Another usage is to subclass the :class:`Site` class, 
bringing the concept of an application instance to Django::

      from django_site import Site
      
      class MySite(Site):
          version = "1.0"
          
          def do_maintenance(self):
              # your application specific code here
              
      SITE = MySite(__file__,globals())
              
        
This simple trick brings inheritance to the settings and 
lets us define methods that can be overridden in 
local :xfile:`settings.py` files.

These features are used extensively by the Lino project which 
defines two subclasses :class:`lino.Site` and :class:`lino.ui.Site`.


:11: WARNING: py:attr reference target not found: django_site.signals.pre_analyze

`django_site` is a Django app which does not define 
any models, but provides a :class:`Site` class designed to 
be instantiated as ``settings.SITE``.
Basic usage in your :xfile:`settings.py` file::

      from django_site import Site
      SITE = Site(__file__,globals())
      INSTALLED_APPS = [... "django_site"]

The base class provides a :meth:`startup <Site.startup>` 
method which runs after Django has populated the model cache.
It analyzes the installed apps and
emits two startup signals 
:attr:`pre_analyze <django_site.signals.pre_analyze>`
and :attr:`post_analyze <django_site.signals.post_analyze>`.

If you have `django_site` installed, 
then you can write in any models module code like this::

    from django_site.signals import post_analyze, receiver
    
    @receiver(post_analyze)
    def my_handler(sender,**kw):
        # code to run exactly once per process at startup
        


    >>> from django.conf import settings
    >>> print settings.SITE.welcome_text()

Another usage is to subclass the :class:`Site` class, 
bringing the concept of an application instance to Django::

      from django_site import Site
      
      class MySite(Site):
          version = "1.0"
          
          def do_maintenance(self):
              # your application specific code here
              
      SITE = MySite(__file__,globals())
              
        
This simple trick brings inheritance to the settings and 
lets us define methods that can be overridden in 
local :xfile:`settings.py` files.

These features are used extensively by the Lino project which 
defines two subclasses :class:`lino.Site` and :class:`lino.ui.Site`.


:11: WARNING: py:attr reference target not found: django_site.signals.post_analyze
The current stable release is :doc:`0.0.1`.
We're currently working on :doc:`coming`.
:1: WARNING: unknown document: 0.0.1
The current stable release is :doc:`0.0.1`.
We're currently working on :doc:`coming`.
:1: WARNING: unknown document: coming
